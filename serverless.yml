custom:
  # Our environment is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}

  projectName: hmd-service

  tableName: ${self:custom.stage}-hmd-db-table # DynamoDB name
  clientS3: ${self:custom.stage}-hmd-client-bucket # Set the bucket name for react app

  s3Sync:
    - bucketName: ${self:custom.clientS3}
      localDir: app/build
      deleteRemoved: true
      acl: public-read
      followSymlinks: true
      defaultContentType: text/html
      params: # optional
        - index.html:
            CacheControl: "no-cache"
        - "*.js":
            CacheControl: "public, max-age=31536000"

service: ${self:custom.projectName}

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-s3-sync
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB --testing for short-lived data
  - ${file(resources/dynamodb-table.yml)}
  # S3 to serve UI
  - ${file(resources/s3-ui-bucket.yml)}
  # Neptune Stack
  - ${file(resources/neptune-cluster.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}

provider:
  name: aws
  stage: dev
  runtime: nodejs12.x
  Handler: functions/handler
  region: us-east-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}
    NEPTUNE_ENDPOINT:
      Fn::GetAtt: NeptuneStack.Outputs.DBClusterEndpoint
    NEPTUNE_PORT:
      Fn::GetAtt: NeptuneStack.Outputs.DBClusterPort
    Region: us-east-2

    IdentityPoolId: CognitoIdentityPool
    UserPoolId: CognitoUserPool
    UserPoolClientId: CognitoUserPoolClient
    ServiceEndpoint: ApiGatewayRestApi

    vpc:
      Fn::GetAtt: NeptuneStack.Outputs.VPC

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - "Fn::GetAtt": [HmdTable, Arn]
    - Effect: Allow
      Action:
        - s3:*
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DetachNetworkInterface
        - ec2:DeleteNetworkInterface
        - neptune:*
      Resource:
        - "*"

functions:
  create:
    # Defines an HTTP API endpoint that calls the main function in create.js
    # - path: url path is /hmd
    # - method: POST request
    handler: functions/create.main
    events:
      - http:
          path: hmd
          method: post
          cors: true
          authorizer: aws_iam
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /hmd/{id}
    # - method: GET request
    handler: functions/get.main
    events:
      - http:
          path: hmd/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /hmd
    # - method: GET request
    handler: functions/list.main
    events:
      - http:
          path: hmd
          method: get
          cors: true
          authorizer: aws_iam
